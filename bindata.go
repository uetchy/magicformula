// Code generated by go-bindata.
// sources:
// templates/formula_bin.tmpl
// templates/formula_golang.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFormula_binTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x50\x4d\x4b\xc4\x30\x10\xbd\xfb\x2b\x86\xec\x45\xc1\xad\x20\xe8\x41\xd4\xcb\x2e\xe2\x41\x3c\x28\x9e\x97\x69\x3b\x6b\x82\x49\x53\x32\xe9\x7a\x28\xfd\xef\xce\xb4\x11\xeb\x21\xf0\xe6\x7d\x64\x1e\xd3\x78\x64\x86\x71\x84\x6a\xa7\xe8\x15\x03\xc1\x34\xc1\x3d\x3c\xc5\x14\x06\x8f\x67\x00\x43\xf2\x60\xd4\xf1\xf1\xf6\x22\x9a\x11\x8a\x2d\x5e\xdf\xdc\x2e\xec\xce\x52\xf3\xf5\x3e\x84\x22\x09\xe5\x8e\x50\xed\x89\x9b\xe4\xfa\xec\x62\xa7\xff\xb5\x32\x2e\xf6\xff\x82\x51\x3f\x75\xad\xc0\xbf\xec\x73\x0c\xd4\xe3\xe7\x5c\xc4\xfe\xe2\x39\xbc\x52\xd6\x49\x89\x5a\xc2\xb6\x78\x14\x89\x7e\x09\x77\x75\xc2\xae\xb1\xf0\xf0\x08\x26\x20\x67\x4a\x46\xad\x71\x59\x6e\xbe\x5d\xb6\x71\xc8\xdb\x26\x86\xde\x93\x72\x2c\x21\xb3\x77\x8c\xb5\x27\x58\xd3\x1a\x6b\xe9\x08\xae\xe3\x8c\xde\xcb\x04\x50\xbb\xae\x2a\xf3\xb2\xb8\xdc\x4e\x8f\x20\xbd\x34\x92\x89\x33\xb4\x71\xb6\xcb\x71\x29\xe5\x43\xc0\x2c\x8d\xd6\x7e\x38\x51\x62\x2d\xb4\x19\x0b\xd2\xee\x6c\xc9\xfb\x83\xd4\xeb\x87\x7c\x6e\x36\xa3\x6c\x9b\xae\xd6\xa9\xed\xc9\x5c\x94\x4d\xfa\x7e\x02\x00\x00\xff\xff\x66\x70\x09\x74\xc8\x01\x00\x00")

func templatesFormula_binTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_binTmpl,
		"templates/formula_bin.tmpl",
	)
}

func templatesFormula_binTmpl() (*asset, error) {
	bytes, err := templatesFormula_binTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_bin.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1442386721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormula_golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xdf\x6b\xd4\x40\x10\x7e\xbf\xbf\x62\xd8\xbe\x28\xf4\x12\x10\xf4\xe1\xb0\x8a\xb4\xda\x3e\x94\x2a\xb5\x16\x41\x24\xec\x25\x73\xc9\xd2\xdd\x6c\xdc\xdd\x9c\xe8\x91\xff\xdd\xd9\xd9\xc4\xe4\xb4\x5a\xe8\xdd\xec\xcc\xf7\xcd\xaf\x6f\xce\xe1\xb7\x5e\x39\x04\xa1\x65\x5b\xf7\xb2\xc6\xbc\xb6\x62\xb5\x2a\xb5\xf4\x1e\x0e\x07\xc8\xce\xa3\x75\x23\x0d\xc2\x30\xc0\x4b\x78\x67\x9d\xe9\xb5\x5c\x01\xf4\x4e\x83\x88\x88\x4f\xb7\xd7\x14\x13\xa7\xb0\x09\xb2\x86\xb3\x57\xc9\x7b\x47\x36\x79\xc9\x54\x3b\xc8\x6e\x71\xaf\xbc\xb2\x2d\xb9\x08\xe7\xa6\xd7\x04\x5e\x84\xe3\x1b\xdb\x8a\x2c\xaa\xe1\x1b\xf9\xec\xf9\x8b\x84\x39\x6f\xb0\x7c\xf8\xd8\x9b\x88\xa1\xd0\x98\xf8\x02\x7d\xe9\x54\x17\x12\xb9\xa2\x57\x42\x1f\xfb\x8f\x92\x8e\xcc\x2b\x6b\xb0\xa3\x81\xc9\xd9\x4c\x26\x53\x17\x81\x05\x8f\x88\x0d\xca\x6a\x84\x44\x2b\xcd\xbc\x75\xb2\x2d\x1b\x9e\xc4\x48\x1f\xd0\x89\x08\xb5\xa9\xb2\xf8\xae\x42\x63\xfb\xb0\x2e\xad\xe9\x34\x46\x9f\x27\x92\xb8\x50\x5e\x6e\x35\xc2\x4f\xdf\xc0\x32\x14\xa9\x15\x76\x54\xd2\x17\x91\x4e\x5a\xc4\xcc\x9b\x6d\xaf\x74\xb5\x4a\xbd\x53\x3d\xea\x8d\x06\xec\x7c\x9a\xa7\xb6\x85\x43\x6f\x7b\x57\x8e\x03\x8c\x6a\x09\xa8\x2c\x85\x1f\x55\xea\xbf\x0a\x10\x89\x3a\x48\xd5\xe6\xe9\x2b\xdc\x81\x6a\x7d\x90\x5a\x73\x56\xf3\x50\x29\x57\x74\x20\x4e\x0e\xdc\x5e\x27\x43\x33\xe4\xde\x95\x39\xef\x5f\x39\xe2\xe5\x82\xa1\xba\x2d\x3c\xfc\x06\x9d\xfe\x83\x32\x76\xc7\x8c\xb7\x37\xf7\x5f\xc4\xe5\xfb\x0f\x6f\xee\xae\xc4\x57\x38\x9b\xc9\x53\x34\x93\x5d\x5c\x53\x11\x7d\x20\x18\xc7\x79\x8f\x88\x43\xbe\x55\x6d\x4a\x78\x3d\x9e\xf7\x66\x73\x69\x33\x1a\xa2\xc6\xa2\x8a\x1b\x9c\x36\xe7\x4f\xe7\x1a\xb9\xa0\x96\x58\x0b\xba\xc0\x1f\xa4\xa9\x61\x25\x28\x3f\x43\xa2\xb1\xd6\xd5\x4e\xcb\x9a\xc5\x5c\x7f\x06\x23\x55\x9b\xdd\xa3\xe3\x0d\x9e\x1c\xf6\xc9\x1a\x38\xca\xc4\xa5\x2c\x9c\x97\x1a\xcb\xc6\x6d\xfe\x11\xe5\x30\x1d\x28\xd7\xca\xe2\x01\xbd\x06\x71\x74\x24\xc0\x7f\x74\x3b\xc5\xec\x9e\x93\x91\x3f\x2f\xfe\xaa\x97\x04\x8d\x9f\xf4\x15\xd0\x87\xe9\x38\xe8\xd7\x8d\x2e\x14\x46\x06\xba\xe2\x65\x27\xb0\x7f\x6c\x1e\xdf\xa0\xd6\x05\x9d\x74\xd7\x87\x27\x51\x47\xd5\x0e\xf9\x92\xb5\xde\x8b\xa7\x63\xa5\xf8\xff\x2b\x00\x00\xff\xff\xf0\xe8\x08\x6f\x60\x04\x00\x00")

func templatesFormula_golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_golangTmpl,
		"templates/formula_golang.tmpl",
	)
}

func templatesFormula_golangTmpl() (*asset, error) {
	bytes, err := templatesFormula_golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_golang.tmpl", size: 1120, mode: os.FileMode(420), modTime: time.Unix(1442386728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/formula_bin.tmpl":    templatesFormula_binTmpl,
	"templates/formula_golang.tmpl": templatesFormula_golangTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"formula_bin.tmpl":    &bintree{templatesFormula_binTmpl, map[string]*bintree{}},
		"formula_golang.tmpl": &bintree{templatesFormula_golangTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
