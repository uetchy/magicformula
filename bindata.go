// Code generated by go-bindata.
// sources:
// templates/formula_bin.tmpl
// templates/formula_golang.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFormula_binTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x41\x4b\xfc\x30\x10\xc5\xef\xff\x4f\x31\x64\x2f\x7f\xc1\xad\x20\xe8\x41\xd4\xcb\x2e\xe2\x41\x3c\x28\x9e\x97\x69\x3b\x6b\x82\x49\x53\x32\xe9\x7a\x28\xfd\xee\xce\xb4\x15\xb3\x87\xc0\xcc\x9b\xf7\xcb\x3c\xa6\xf1\xc8\x0c\xe3\x08\xd5\x4e\xab\x57\x0c\x04\xd3\x04\xf7\xf0\x14\x53\x18\x3c\xfe\x03\x18\x92\x07\xa3\x8e\x8f\xb7\x17\x99\x19\x91\xd8\xe2\xf5\xcd\xed\xa2\xee\x2c\x35\x5f\xef\x43\x58\x47\x22\xb9\x23\x54\x7b\xe2\x26\xb9\x3e\xbb\xd8\xe9\x7f\xad\xb4\x8b\xfd\x7c\x60\xd4\x4f\x5d\x2b\xe5\x1f\xfb\x1c\x03\xf5\xf8\x39\x07\xb1\xbf\xf5\x0c\x17\x93\x92\x14\xd4\x12\xb6\x67\x29\x2f\xe1\xae\x4e\xd8\x35\x16\x1e\x1e\xc1\x04\xe4\x4c\xc9\xa8\x33\x2e\xbb\xcd\xb7\xcb\x36\x0e\x79\xdb\xc4\xd0\x7b\x52\x8d\x05\x32\x7b\xc7\x58\x7b\x82\x52\x56\xac\xa5\x23\xb8\x8e\x33\x7a\x2f\x1d\x40\xed\xba\x6a\xed\x97\xbd\xeb\xe9\xf4\x06\x12\x4b\x91\x4c\x9c\xa1\x8d\xb3\x5d\x6e\x4b\x29\x1f\x02\x66\x49\x54\xfa\xe1\x44\x89\x35\xd0\x66\x5c\x2b\xcd\xce\x96\xbc\x3f\x48\xbc\x7e\xc8\xff\xcd\x66\x94\x6d\xd3\x55\x49\x6d\x4f\xe6\x62\xdd\xa4\xef\x27\x00\x00\xff\xff\xb5\x03\xfa\x4d\xc7\x01\x00\x00")

func templatesFormula_binTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_binTmpl,
		"templates/formula_bin.tmpl",
	)
}

func templatesFormula_binTmpl() (*asset, error) {
	bytes, err := templatesFormula_binTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_bin.tmpl", size: 455, mode: os.FileMode(420), modTime: time.Unix(1442109422, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesFormula_golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x5d\x6f\xd3\x30\x14\x7d\xef\xaf\xb8\xf2\x5e\x40\x6a\x13\x09\x09\x1e\x2a\x06\x42\x1b\x6c\x0f\xd3\x40\x03\x26\x24\x84\x2c\x37\xbe\x4d\xac\xd9\x71\xb0\x9d\x22\xa8\xf2\xdf\xb9\xb6\x93\x35\x1d\x63\x93\xd6\xda\xf7\xdc\x73\x3f\x7c\x4e\x1d\xfe\xec\x95\x43\x60\x5a\xb4\x75\x2f\x6a\x2c\x6b\xcb\x16\x8b\x4a\x0b\xef\x61\xbf\x87\xe2\x2c\x9e\xae\x85\x41\x18\x06\x78\x0d\x1f\xac\x33\xbd\x16\x0b\x80\xde\x69\x60\x31\xe3\xeb\xcd\x15\x61\x6c\x09\xeb\x20\x6a\x38\x7d\x93\xa3\xb7\xe8\xbc\xb2\x6d\x44\xe8\xaa\xb6\x50\xdc\xe0\x4e\x8d\x21\xca\x75\xd3\x6d\x22\xcc\xe0\x78\xc7\x56\xd2\x89\xfa\xf8\x46\xbc\x78\xf9\x2a\xe7\x9c\x35\x58\xdd\x7d\xee\x4d\xcc\x21\x68\x2c\x7c\x8e\xbe\x72\xaa\x0b\x99\x2c\xe9\x96\xb3\x8f\xe3\x47\x45\x47\xe6\xa5\x35\xd8\xd1\xd2\x14\x6c\xa6\x63\xa2\xce\x80\x19\x8f\x88\x0d\x0a\xf9\x70\xed\x8d\x13\x6d\xd5\xa4\x45\x8c\xf0\x01\x1d\x8b\x99\x36\x37\x66\xbf\x54\x68\x6c\x1f\x56\x95\x35\x9d\xc6\x18\xf3\x44\x62\xe7\xca\x8b\x8d\x46\xf8\xe3\x1b\x98\x43\x91\x2a\xb1\xa3\x8e\x9e\x47\x3a\xc9\x11\x2b\xaf\x37\xbd\xd2\x72\x91\x47\xa7\x7e\x34\x1a\xed\xd7\xf9\xbc\x4e\x6d\xb9\x43\x6f\x7b\x57\x8d\xf3\x8f\x82\x31\x90\x96\xe0\x47\xc5\x7a\x52\x00\x22\xd1\x04\xb9\xdb\x61\x79\x89\x5b\x50\xad\x0f\x42\xeb\x54\xd5\xdc\x49\xe5\x78\x07\xec\x64\x9f\xc6\xeb\x44\x68\x86\xd2\xbb\xaa\x4c\xcf\xaf\x1c\xf1\x4a\x96\x52\x75\xcb\x3d\xdc\x27\x2d\xff\x43\x19\xa7\x4b\x8c\xf7\xd7\xb7\xdf\xd9\xc5\xc7\x4f\xef\xbe\x5c\xb2\x1f\x70\x7a\x20\x4f\x68\x21\xba\xf8\x4c\x3c\xc6\x80\xa5\xbc\x54\xf7\x88\x38\x94\x1b\xd5\xe6\x82\x57\xa3\xc3\xd7\xeb\x0b\x5b\xd0\x12\x35\x72\x19\x5f\x70\x7a\x39\xbf\x3c\xf4\x28\x19\x8d\x94\xb4\x20\x03\xfe\x26\x4d\x4d\x52\x82\xea\xa7\x94\x78\x58\x69\xb9\xd5\xa2\x4e\x62\xae\xbe\x81\x11\xaa\xbd\x37\xfd\xc9\x7e\x97\x4f\x43\x42\x13\x71\x2e\x4b\xaa\x4b\x83\x15\xe3\x6b\x3e\x40\x13\x4c\xfe\x4c\xbd\x8a\x68\xa0\xb7\xc0\x8e\x4c\x02\xe9\x8f\xbc\xc3\x0f\xe1\x43\x31\x8a\x97\xfc\x9f\x7e\x59\xd0\xf8\x49\x5f\x01\x7d\x98\xcc\x41\x3f\x70\x74\x81\x1b\x11\xc8\xc5\xf3\x49\x60\xf7\xd8\x3e\xbe\x41\xad\x39\x59\xba\xeb\xc3\xb3\xa8\xa3\x6a\x87\x72\xce\x5a\xed\xd8\xf3\xb1\x53\xfc\xff\x1b\x00\x00\xff\xff\xc7\xbe\xb1\xb5\x63\x04\x00\x00")

func templatesFormula_golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_golangTmpl,
		"templates/formula_golang.tmpl",
	)
}

func templatesFormula_golangTmpl() (*asset, error) {
	bytes, err := templatesFormula_golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_golang.tmpl", size: 1123, mode: os.FileMode(420), modTime: time.Unix(1442109614, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/formula_bin.tmpl": templatesFormula_binTmpl,
	"templates/formula_golang.tmpl": templatesFormula_golangTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"formula_bin.tmpl": &bintree{templatesFormula_binTmpl, map[string]*bintree{
		}},
		"formula_golang.tmpl": &bintree{templatesFormula_golangTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

