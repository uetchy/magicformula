// Code generated by go-bindata.
// sources:
// templates/formula.tmpl
// templates/formula_general.tmpl
// templates/formula_golang.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFormulaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\x8c\x7c\xac\x20\x2b\x21\xc1\xa1\x02\x2e\x5b\x3e\x24\x10\x42\x5b\xb8\x70\x59\xcd\x26\xd3\xd8\xc2\x89\x53\x8f\xb3\x20\xaa\xfd\xef\x8c\xe3\xa4\x75\x77\x95\x45\xf4\x10\x65\x3c\x33\xef\xcd\x9b\x8f\xbb\x3b\x30\x37\x40\xb7\x50\x7e\x32\x5d\x0d\xaa\x71\x16\xbb\x46\xc1\xe1\xe0\xe9\x76\x30\x9e\x40\x45\xc7\x80\x0d\xad\x1a\xa7\x24\x9d\x24\xed\x70\x28\x8a\xca\x22\x33\x88\xa3\x5c\x47\xeb\x0b\xb6\x24\x7e\x78\x0d\xef\x9d\x6f\x07\x8b\x05\xc0\xe0\x2d\x44\x48\xf9\x7d\xf3\x59\x62\xea\xa1\x98\x38\xae\x2b\x4d\x02\x51\x5c\xb5\xb1\xdc\x33\xb8\x0c\xd8\xc0\x9b\xb7\x09\xf1\x4d\xec\x84\x48\xf5\x12\xb4\xdc\xd0\xde\xb0\x71\x5d\x02\xf8\xf9\x35\xa3\xb2\x70\x26\x15\xe0\x5c\xe1\x3d\xf9\x11\xb2\x50\x76\x75\x21\xf8\x8b\xd5\xac\xe0\x88\x03\x7d\xa5\xcd\x9e\x22\x0f\x6b\x7c\xf1\xf2\x55\xa2\x59\x6b\xaa\x7e\x5e\x0f\x6d\xe4\x4a\xe5\x17\xe8\xca\x2b\xe2\xca\x9b\x3e\x24\xd1\xb5\xbc\x12\xc3\x63\xff\x3f\x48\x3e\xba\x96\x7a\xd9\x90\x04\xf5\x6c\x8e\x2c\x59\x60\x89\xa2\x90\xbf\x26\xac\x27\x40\xb4\x24\x59\x86\xbb\xf3\xd8\x55\x7a\x1c\x6d\x8b\x1c\xc8\xab\xe2\x7e\x92\xe5\x0f\xd6\x6b\xd7\xf6\x96\xa2\x40\xfe\x8a\x41\x0b\xca\x25\xb9\xea\x97\x09\xda\x0d\xe1\x79\xf5\x90\x21\x84\xea\xca\x30\xee\x2c\xc1\x1f\xd6\x90\x87\xce\x0f\xfb\xf8\x2c\x6b\xea\x25\x9b\xb7\xb1\x90\x1c\x64\xd4\x77\xb9\x1b\x8c\xad\xf3\x53\x11\xe9\xd2\xb4\x0c\xb1\xe7\x74\x00\x39\x2a\xf6\x39\x5d\x6b\x82\x47\xc7\xbb\xdf\xc1\x63\x02\xe7\x57\x33\x11\x7d\x70\x1b\x62\x37\xf8\x8a\x26\xbe\xc6\x6d\xfd\xe4\x39\x22\xac\x9d\x84\x97\x4e\xff\xa9\xf7\x2b\x46\xbe\xbe\xb1\xa1\x1b\x30\x1d\x07\xb4\x76\xac\xb7\x3c\x30\x89\x04\x92\x69\x63\xa0\xd9\xbd\x9d\x90\x0a\xca\xa9\x65\xcb\x74\x92\x4a\x1d\x79\xb4\xa7\xb9\xb9\x28\xf9\x05\xe2\x30\x77\xfd\x7f\x2a\x22\x72\xa6\x1d\x37\x7f\xbf\xfb\x73\x7a\x72\xd4\x63\x31\xf1\xfb\x1b\x00\x00\xff\xff\x28\x80\x0b\xa1\xd0\x04\x00\x00")

func templatesFormulaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormulaTmpl,
		"templates/formula.tmpl",
	)
}

func templatesFormulaTmpl() (*asset, error) {
	bytes, err := templatesFormulaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula.tmpl", size: 1232, mode: os.FileMode(420), modTime: time.Unix(1442414000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormula_generalTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x5f\x0a\xc2\x30\x0c\x87\xdf\x7b\x8a\x90\xbd\x28\xe8\xbc\x89\x57\x28\xd5\xfd\x74\x85\x2e\x93\x26\xdb\x4b\xe9\xdd\xad\x30\x64\x82\x79\xca\x9f\x2f\x5f\x52\x0a\x0d\x78\x44\x01\xf1\x13\x82\x1c\x92\x8f\xa2\x16\x52\x62\xaa\xd5\x51\x8b\x5b\x94\x7e\xeb\x11\x37\xbe\xbf\x86\x09\x6d\xc8\xae\x15\x90\xe1\xc3\xb9\x3f\x1e\x83\xda\x57\x12\x54\x91\xcd\x4f\xc1\xee\xe3\x8f\x85\x56\x64\x8d\xb3\x50\x57\xb6\xac\xf2\x89\x74\x44\x4a\x7e\x5e\xec\xb5\xd8\x81\xbb\xd2\x7e\xa8\x97\xfd\xd6\x79\xe5\xe3\xee\xfe\x3b\x00\x00\xff\xff\x73\x32\xe9\xf5\xc7\x00\x00\x00")

func templatesFormula_generalTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_generalTmpl,
		"templates/formula_general.tmpl",
	)
}

func templatesFormula_generalTmpl() (*asset, error) {
	bytes, err := templatesFormula_generalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_general.tmpl", size: 199, mode: os.FileMode(420), modTime: time.Unix(1442413862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormula_golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x51\x6b\xe3\x30\x0c\xc7\xdf\xfb\x29\x84\xfb\x72\x07\x6d\xf2\x5e\x38\x8e\xe3\xee\xe8\x06\xa3\xeb\xc3\x28\x63\x63\x18\x37\x51\x13\x33\xc7\x31\x96\xd3\xb1\x85\x7c\xf7\x29\x6e\x97\xb4\xb4\x0f\xcb\x43\x10\x92\x7e\xfa\x4b\xb2\xda\x16\x72\xdc\x69\x8b\x20\x8a\xda\x28\x5b\x48\x6d\x29\x28\x63\x04\x74\xdd\x04\xf8\xab\x5e\x73\xed\xa5\x03\x31\x6d\xb7\x8d\x36\xb9\x53\xa1\xec\x52\xf2\x59\xca\x6c\xb2\x8c\xd0\x6d\xe5\x6a\x1f\xfe\x69\xcf\x90\x88\x94\xb1\x92\x60\xc8\x9f\x7d\x83\x5e\x73\x64\xc0\xff\xaf\x36\xcf\x62\x79\xbf\xfe\xf3\x70\x23\x5e\xe0\xd7\x58\xe9\x2b\x9a\x28\xe7\xd0\xe6\xb2\xf7\x81\x88\x79\x51\xe4\x0c\xec\xd2\xad\xb6\x87\x82\x77\xac\xd3\xa8\x02\x17\x8b\x65\x9d\xf0\x80\x05\xca\x1c\x1d\x81\x47\xaa\x1b\x9f\x21\xcd\x46\x8d\x54\x70\x7f\x62\x12\x39\x7a\xa7\x80\x55\xbf\x9c\xbe\x7e\x4c\xe9\x8d\xb9\xc9\x77\x46\x15\x14\xed\x47\xa8\x94\xb6\xc9\x06\x3d\xe9\xda\xc2\xb4\xdd\x1f\xac\x2e\x46\x23\xd8\x0f\xbb\x52\x15\x0e\x03\x72\x63\xc9\x71\xd3\x57\xa2\xec\xd0\x3b\x48\x9e\xa8\xfc\x5b\x57\xce\x60\xe0\x6a\x74\x5c\x10\x07\x62\x1b\xc9\x9b\x0e\xe5\x6f\x10\xd9\x98\x71\x80\x01\x3e\xa8\x94\xa3\x7b\xd4\x61\x7f\x2a\x2f\xc4\x78\x8d\xec\xe3\x7f\xff\xe2\xa3\x35\xb9\x3c\x8d\x80\x14\x86\xbb\x50\x44\xe8\x83\xac\x54\xc8\xca\xb3\x11\x60\x7f\x6d\x11\x54\xa2\x31\xb2\x6e\x82\x6b\xc2\x8f\xfe\x1a\xb4\xed\xd2\x53\x6a\xbe\x17\x3f\x4f\xe4\x3f\x03\x00\x00\xff\xff\x47\xd5\x86\x02\x99\x02\x00\x00")

func templatesFormula_golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_golangTmpl,
		"templates/formula_golang.tmpl",
	)
}

func templatesFormula_golangTmpl() (*asset, error) {
	bytes, err := templatesFormula_golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_golang.tmpl", size: 665, mode: os.FileMode(420), modTime: time.Unix(1442413582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/formula.tmpl":         templatesFormulaTmpl,
	"templates/formula_general.tmpl": templatesFormula_generalTmpl,
	"templates/formula_golang.tmpl":  templatesFormula_golangTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"formula.tmpl":         &bintree{templatesFormulaTmpl, map[string]*bintree{}},
		"formula_general.tmpl": &bintree{templatesFormula_generalTmpl, map[string]*bintree{}},
		"formula_golang.tmpl":  &bintree{templatesFormula_golangTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
