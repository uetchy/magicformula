// Code generated by go-bindata.
// sources:
// templates/formula_bin.tmpl
// templates/formula_golang.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFormula_binTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x41\x4b\xc4\x30\x10\x85\xef\xfe\x8a\x21\x7b\x51\xd0\x0a\x82\x9e\xbc\xad\x88\x07\xf1\xa0\x78\x5e\xc6\x76\xd6\x04\x93\xa6\x24\x93\xbd\x94\xfe\x77\x67\x36\x11\xdb\x43\xe9\x9b\xf7\xde\x47\x92\xe9\x3d\xe6\x0c\xf3\x0c\xdd\x5e\xd5\x1b\x06\x82\x65\x81\x47\x78\x8e\x29\x14\x8f\x17\x00\x25\x79\x30\xda\xf8\x7c\x7f\x95\xcc\x88\x95\x2d\xde\xdd\x3f\x54\x77\x6f\xa9\xff\xf9\x28\xa1\x45\x62\xb9\x23\x74\x4f\x94\xfb\xe4\x26\x76\x71\x94\x60\x90\xa9\xb6\xb7\xbe\x5a\x34\x0e\xa2\xfe\xc9\x97\x18\x68\xc2\x6f\xbd\x86\xfd\x93\x67\x74\x15\x6c\xb8\x15\x4a\xa8\x9e\xd5\x5f\x45\xaa\xb1\xaa\x4b\x79\xa0\x23\xb8\x31\x33\x7a\x2f\x13\xc0\x97\x1b\xbb\x36\x57\xaa\x2d\x41\x5f\x23\x94\x22\x4c\x99\x61\x88\xe7\xba\x6c\x89\x12\x1f\x02\x72\x6f\x37\x7d\x38\x51\xca\xfa\xae\xdd\xdc\xd4\x62\xae\x65\x55\xe4\xfd\x21\x16\x9e\x0a\x5f\x9a\xdd\x2c\xa7\x2d\xb7\x6b\xea\xe6\x64\xae\xda\x49\xfa\xfd\x06\x00\x00\xff\xff\xc7\xab\xbd\xdb\x91\x01\x00\x00")

func templatesFormula_binTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_binTmpl,
		"templates/formula_bin.tmpl",
	)
}

func templatesFormula_binTmpl() (*asset, error) {
	bytes, err := templatesFormula_binTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_bin.tmpl", size: 401, mode: os.FileMode(420), modTime: time.Unix(1442400043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormula_golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x51\x6f\xd3\x30\x10\x7e\xdf\xaf\x38\x79\x2f\x30\xad\x89\x84\x04\x0f\x15\x03\xa1\x0d\x3a\xa4\x69\x4c\xdb\x98\x90\x10\x8a\xdc\xe4\x1a\x5b\xb3\xe3\xcc\x76\x8a\xa0\xca\x7f\xe7\x6c\x27\x6d\x0a\x9b\x40\x54\x6a\x73\xbe\xef\xbe\xef\xce\x77\x97\x5a\x7c\xe8\xa4\x45\x60\x8a\x37\x75\xc7\x6b\xcc\x6b\xc3\x0e\x0e\x4a\xc5\x9d\x83\xcd\x06\xb2\xd3\x60\x5d\x72\x8d\xd0\xf7\xf0\x1a\x3e\x18\xab\x3b\xc5\x0f\x00\x3a\xab\x80\x85\x88\xcf\xd7\x17\x84\x05\x53\xae\x00\x1f\xa2\xe3\xa6\x14\x48\x14\xe6\x4a\xcd\x08\x3c\x86\xb9\xe7\x35\x9c\xbc\x49\x8c\x5b\xb2\x13\x03\x9b\x8a\xac\x44\xcd\xae\x71\x2d\x9d\x34\x4d\x22\xd8\xf1\x34\xb2\x26\xf0\x8e\x4a\x85\x3c\x9a\x98\xdb\x52\xc8\x35\x86\xe4\x4e\xf0\x17\x2f\x5f\x25\x8d\x53\x81\xe5\xfd\x4d\xa7\x83\x46\xa2\x8e\x15\xe4\x47\x74\x3e\xca\xb7\xc5\x9c\xa1\x2b\xad\x6c\x7d\x4a\x58\xd1\x29\x29\xec\xfb\xff\x22\x72\x6e\x34\xb6\xd4\x54\x02\xc5\x68\x46\x95\x09\xf0\x94\x04\x3d\x04\xf2\x6a\x88\x0f\x16\xc5\x52\x5f\x96\x96\x37\xa5\x88\x5d\xd1\xdc\x79\xb4\x34\x2e\x00\x93\x2a\x62\xdf\xa5\x17\xa6\xf3\xb3\xd2\xe8\x56\x61\xf0\x39\x22\xb1\x33\xe9\xf8\x52\x21\xfc\x74\x02\xa6\x50\xa0\x56\xd8\x52\x72\x57\x04\x3a\x0d\x3f\x28\xcf\x97\x9d\x54\x55\x2a\x8c\xd2\x51\x9d\x74\xef\xd6\xa5\x7e\xd7\xa6\xb0\xe8\x4c\x67\xcb\xe1\x32\xc3\x76\x30\xa8\x0c\xc1\x4f\x6d\xc6\xff\x8e\x97\x8c\x69\x87\x62\xc1\x2b\x90\x8d\xf3\x5c\xa9\x98\x4f\xdf\x57\xd2\x16\x2d\xb0\xc3\x4d\xac\xbb\xe5\x5e\xf4\xb9\xb3\x65\x1e\x74\x17\x26\xac\xf6\x47\xdd\x1a\xeb\xcf\xa4\x1d\x3a\x0e\xa0\x9a\xc2\xc1\x36\xfe\xf8\x1f\xd8\x57\x84\x6c\xe9\xef\x2f\xef\xbe\xb2\xc5\xa7\xab\x77\xb7\xe7\xec\x1b\x9c\xec\x94\x46\x34\xe3\x6d\xe8\x6b\x11\x7c\xc0\x62\x5c\x4c\xb2\x47\xec\xf3\xa5\x6c\x92\xe0\xc5\xf0\x02\xce\xe7\x0b\x93\xd1\xe5\x6a\x2c\xaa\xd0\xf3\xb1\xd7\xee\x78\x97\x23\x67\x54\x5f\x1c\x1e\x80\xfb\x41\x4b\xa0\xe3\xe8\x48\x3f\x86\x04\x63\xa6\xaa\x95\xe2\x75\x9c\xfe\xec\x0b\x68\x2e\x9b\xec\x0e\x6d\xec\xf0\xe1\x66\x9d\xac\x3e\xa2\x91\x38\x1d\x64\xd4\xa5\xc2\xb2\xa1\xcb\xbf\xa1\x11\xa6\x89\xc6\x5c\x59\xd8\xb8\xb7\xc0\xf6\xb6\x0a\xe2\x87\x96\xad\xd8\xb9\x77\x62\xe4\xcf\x8b\x3f\xf2\xa5\x39\x87\x5f\x7a\x78\x74\x7e\x5c\x27\xfa\xff\x41\xeb\x0b\xcd\x3d\xad\xfd\xb4\x12\x58\x3f\x76\x1f\x27\x50\xa9\x82\xde\x81\xb6\xf3\xcf\xc2\x50\x65\xd3\xe7\x53\xd6\x6c\xcd\x9e\x0f\x99\xc2\xf7\x57\x00\x00\x00\xff\xff\xd1\x81\x9a\x9f\x02\x05\x00\x00")

func templatesFormula_golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormula_golangTmpl,
		"templates/formula_golang.tmpl",
	)
}

func templatesFormula_golangTmpl() (*asset, error) {
	bytes, err := templatesFormula_golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/formula_golang.tmpl", size: 1282, mode: os.FileMode(420), modTime: time.Unix(1442408095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/formula_bin.tmpl":    templatesFormula_binTmpl,
	"templates/formula_golang.tmpl": templatesFormula_golangTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"formula_bin.tmpl":    &bintree{templatesFormula_binTmpl, map[string]*bintree{}},
		"formula_golang.tmpl": &bintree{templatesFormula_golangTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
